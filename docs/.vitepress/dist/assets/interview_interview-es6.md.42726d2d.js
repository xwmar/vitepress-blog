import{o as n,c as s,d as a}from"./app.fbdbcb16.js";const t='{"title":"1. DOM的事件流是什么？","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. DOM的事件流是什么？","slug":"_1-dom的事件流是什么？"},{"level":2,"title":"2. 说说什么是事件委托？","slug":"_2-说说什么是事件委托？"},{"level":2,"title":"3. ES6新增的数组方法有哪些?","slug":"_3-es6新增的数组方法有哪些"},{"level":2,"title":"4. ES6新特性有哪些？","slug":"_4-es6新特性有哪些？"}],"relativePath":"interview/interview-es6.md","lastUpdated":1625760059101}',p={},o=a('<p>ECMAScript 6 具体参考: <a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener noreferrer">https://es6.ruanyifeng.com/</a></p><p>作者: 阮一峰</p><h2 id="_1-dom的事件流是什么？"><a class="header-anchor" href="#_1-dom的事件流是什么？" aria-hidden="true">#</a> 1. DOM的事件流是什么？</h2><p><strong>事件流</strong></p><p>⼜称为事件传播，是⻚⾯中接收事件的顺序。DOM2级事件规定的事件流包括了3个阶段：</p><ul><li>事件捕获阶段（capture phase）</li><li>处于⽬标阶段（target phase）</li><li>事件冒泡阶段（bubbling phase）</li></ul><p><img src="http://pic.qigou.top/dom-image-20210219222213633.png" alt=""></p><p>如上图所示，事件流的触发顺序是：</p><ol><li>事件捕获阶段，为截获事件提供了机会</li><li>实际的⽬标元素接收到事件</li><li>事件冒泡阶段，可在这个阶段对事件做出响应</li></ol><p><strong>事件冒泡（Event Bubbling）</strong></p><p>事件开始由最具体的元素（⽂档中嵌套层次最深的那个节点）接收到后，开始逐级向上传播到较为不具体的节点。</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n  \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span> \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span> \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n  \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span> \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span> \n  \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>如果点击了上面页面代码中的 <code>&lt;button&gt;</code> 按钮，那么该 <code>click</code> 点击事件会沿着 DOM 树向上逐级传播，在途经的每个节点上都会发生，具体顺序如下：</p><ol><li>button 元素</li><li>body 元素</li><li>html 元素</li><li>document 对象</li></ol><p><strong>事件捕获（Event Capturing）</strong></p><p>事件开始由较为不具体的节点接收后，然后开始逐级向下传播到最具体的元素上。</p><p>事件捕获的最大作用在于：事件在到达预定⽬标之前就可以捕获到它。</p><p>如果仍以上面那段 HTML 代码为例，当点击按钮后，在事件捕获的过程中，document 对象会首先接收到这个 <code>click</code> 事件，然后再沿着 DOM 树依次向下，直到 <code>&lt;button&gt;</code>。具体顺序如下：</p><ol><li>document 对象</li><li>html 元素</li><li>body 元素</li><li>button 元素</li></ol><h2 id="_2-说说什么是事件委托？"><a class="header-anchor" href="#_2-说说什么是事件委托？" aria-hidden="true">#</a> 2. 说说什么是事件委托？</h2><p>事件委托，就是利用了事件冒泡的机制，在较上层位置的元素上添加一个事件监听函数，</p><p>来管理该元素及其所有子孙元素上的某一类的所有事件。</p><p><strong>示例</strong></p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>444<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>555<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// ⽗元素 </span>\n    <span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 为⽗元素绑定事件，委托管理它的所有⼦元素li的点击事件 </span>\n    list<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> currentTarget <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentTarget<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">alert</span><span class="token punctuation">(</span>currentTarget<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><blockquote><p>适用场景：在绑定大量事件的时候，可以选择事件委托</p></blockquote><p><strong>优点</strong></p><ul><li>事件委托可以减少事件注册数量，节省内存占⽤!</li><li>当新增⼦元素时，⽆需再次做事件绑定，因此非常适合动态添加元素 (vue解析模板时, 会对新创建的元素, 额外进行绑定的)</li></ul><h2 id="_3-es6新增的数组方法有哪些"><a class="header-anchor" href="#_3-es6新增的数组方法有哪些" aria-hidden="true">#</a> 3. ES6新增的数组方法有哪些?</h2><ol><li><strong><code>forEach()</code></strong> 遍历数组，无返回值，不改变原数组。</li><li><strong><code>map()</code></strong> 遍历数组，返回一个新数组，不改变原数组的值。</li><li><strong><code>filter()</code></strong> 过滤掉数组中不满足条件的值，返回一个符合条件的新数组，不改变原数组的值。</li><li><strong><code>reduce()</code></strong> 接收一个函数作为累加器，数组中每个值(从左到右)开始缩减，最终为一个值。</li><li><strong><code>every()</code></strong> 遍历数组每一项，每一项返回true，最终结果为true，有一项返回false，停止遍历,结果返回为false，不改变原数组。</li><li><strong><code>some()</code></strong> 遍历数组每一项,有一项返回true,则停止遍历，结果返回true。不改变原数组。</li></ol><h2 id="_4-es6新特性有哪些？"><a class="header-anchor" href="#_4-es6新特性有哪些？" aria-hidden="true">#</a> 4. ES6新特性有哪些？</h2><ol><li>变量定义： let、const</li><li>解构赋值： const [a, b, c, d] = [1, 2, 3, 4] // 1,2,3,4</li><li>扩展运算符：{...obj}</li><li>箭头函数； const fn () =&gt; {}</li><li>模版字符串、对象属性简写、参数默认值</li><li>Promise、Class、Proxy、import导入、export导出</li><li>Set 和 Map 数据结构</li></ol>',31);p.render=function(a,t,p,e,l,c){return n(),s("div",null,[o])};export default p;export{t as __pageData};
